name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TITLE="megatoy ${GITHUB_REF_NAME}"
          if gh release view "$GITHUB_REF_NAME" >/dev/null 2>&1; then
            gh release edit "$GITHUB_REF_NAME" --title "$TITLE" --latest
          else
            gh release create "$GITHUB_REF_NAME" --title "$TITLE" --generate-notes --latest
          fi

  build-linux:
    needs: create_release
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: native
            suffix: linux-x64
            cmake_flags: ""
          - variant: general
            suffix: linux-x64-general
            cmake_flags: "-DMEGATOY_GENERAL_X86_64_LINUX=ON"
    env:
      BUILD_TYPE: Release
      VERSION: ${{ github.ref_name }}
      PACKAGE_NAME: megatoy-${{ github.ref_name }}-${{ matrix.suffix }}
      BUILD_DIR: build-${{ matrix.variant }}
      INSTALL_PREFIX: ${{ github.workspace }}/build-${{ matrix.variant }}/install
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ=UTC
          apt-get update
          apt-get install -y build-essential libgl1-mesa-dev libglu1-mesa-dev \
            libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev \
            libgtk-3-dev xorg-dev zip pkg-config git tzdata curl gnupg \
            libasound2-dev libpulse-dev
          curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor -o /usr/share/keyrings/kitware-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/kitware-archive-keyring.gpg
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' > /etc/apt/sources.list.d/kitware.list
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" > /etc/apt/sources.list.d/github-cli.list
          apt-get update
          apt-get install -y cmake gh
      - name: Configure CMake
        run: cmake -S . -B "$BUILD_DIR" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DAUDIODRV_ALSA=ON -DAUDIODRV_PULSE=ON ${{ matrix.cmake_flags }}
      - name: Build
        run: cmake --build "$BUILD_DIR" --config $BUILD_TYPE --parallel
      - name: Install
        run: cmake --install "$BUILD_DIR" --config $BUILD_TYPE --prefix "$INSTALL_PREFIX"
      - name: Package Artifact
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          DIST="dist/$PACKAGE_NAME"
          rm -rf "$DIST"
          mkdir -p "$DIST"
          STAGING="$INSTALL_PREFIX"
          if [ -f "$STAGING/megatoy" ]; then
            cp "$STAGING/megatoy" "$DIST/"
          elif [ -f "$STAGING/bin/megatoy" ]; then
            cp "$STAGING/bin/megatoy" "$DIST/"
          else
            echo "Executable not found under $STAGING" >&2
            exit 1
          fi
          chmod +x "$DIST/megatoy"
          if [ -d "$STAGING/presets" ]; then
            cp -a "$STAGING/presets" "$DIST/"
          elif [ -d "$STAGING/bin/presets" ]; then
            cp -a "$STAGING/bin/presets" "$DIST/presets"
          fi
          (cd dist && zip -r "$PACKAGE_NAME.zip" "$PACKAGE_NAME")
      - name: Upload Artifact
        shell: bash
        run: gh release upload "$GITHUB_REF_NAME" "dist/$PACKAGE_NAME.zip" --clobber

  build-macos-arm64:
    needs: create_release
    runs-on: macos-14
    env:
      BUILD_TYPE: Release
      VERSION: ${{ github.ref_name }}
      PACKAGE_NAME: megatoy-${{ github.ref_name }}-macos-arm64
      INSTALL_PREFIX: ${{ github.workspace }}/build-release/install
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake
        run: cmake -S . -B build-release -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX"
      - name: Build
        run: cmake --build build-release --config $BUILD_TYPE --parallel
      - name: Install
        run: cmake --install build-release --config $BUILD_TYPE --prefix "$INSTALL_PREFIX"
      - name: Package Artifact
        run: |
          APP="build-release/megatoy.app"
          mkdir -p dist
          ditto -c -k --keepParent "$APP" "dist/$PACKAGE_NAME.zip"
      - name: Upload Artifact
        shell: bash
        run: gh release upload "$GITHUB_REF_NAME" "dist/$PACKAGE_NAME.zip" --clobber

  build-macos-x86_64:
    needs: create_release
    runs-on: macos-13
    env:
      BUILD_TYPE: Release
      VERSION: ${{ github.ref_name }}
      PACKAGE_NAME: megatoy-${{ github.ref_name }}-macos-x86_64
      INSTALL_PREFIX: ${{ github.workspace }}/build-release/install
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake
        run: cmake -S . -B build-release -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX"
      - name: Build
        run: cmake --build build-release --config $BUILD_TYPE --parallel
      - name: Install
        run: cmake --install build-release --config $BUILD_TYPE --prefix "$INSTALL_PREFIX"
      - name: Package Artifact
        run: |
          APP="build-release/megatoy.app"
          mkdir -p dist
          ditto -c -k --keepParent "$APP" "dist/$PACKAGE_NAME.zip"
      - name: Upload Artifact
        shell: bash
        run: gh release upload "$GITHUB_REF_NAME" "dist/$PACKAGE_NAME.zip" --clobber

  build-windows:
    needs: create_release
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
      VERSION: ${{ github.ref_name }}
      PACKAGE_NAME: megatoy-${{ github.ref_name }}-windows-x64
      INSTALL_PREFIX: ${{ github.workspace }}/build-release/install
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure
        shell: bash
        run: cmake -S . -B build-release -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX"
      - name: Build
        shell: bash
        run: cmake --build build-release --config $BUILD_TYPE --parallel
      - name: Install
        shell: bash
        run: cmake --install build-release --config $BUILD_TYPE --prefix "$INSTALL_PREFIX"
      - name: Package Artifact
        shell: pwsh
        run: |
          $dist = "dist/$env:PACKAGE_NAME"
          Remove-Item $dist -Recurse -Force -ErrorAction Ignore
          New-Item -ItemType Directory -Path $dist | Out-Null
          $install = "$env:INSTALL_PREFIX"
          $exe = Join-Path $install 'megatoy.exe'
          if (-Not (Test-Path $exe)) {
            throw "Executable not found: $exe"
          }
          Copy-Item $exe $dist -Force
          $presets = Join-Path $install 'presets'
          if (Test-Path $presets) {
            Copy-Item $presets $dist -Recurse -Force
          }
          Push-Location dist
          Compress-Archive -Path $env:PACKAGE_NAME -DestinationPath "$env:PACKAGE_NAME.zip" -Force
          Pop-Location
      - name: Upload Artifact
        shell: bash
        run: gh release upload "$GITHUB_REF_NAME" "dist/$PACKAGE_NAME.zip" --clobber
