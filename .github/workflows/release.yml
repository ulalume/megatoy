name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if gh release view "${GITHUB_REF_NAME}" >/dev/null 2>&1; then
            gh release edit "${GITHUB_REF_NAME}" --title "megatoy ${GITHUB_REF_NAME}" --latest
          else
            gh release create "${GITHUB_REF_NAME}" --title "megatoy ${GITHUB_REF_NAME}" --generate-notes --latest
          fi

  build:
    name: Build ${{ matrix.label }}
    needs: create_release
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: Linux (x64)
            os: Linux
            runner: ubuntu-latest
            archive_suffix: linux-x64
            cmake_extra_args: ""
          - label: macOS (arm64)
            os: macOS
            runner: macos-14
            archive_suffix: macos-arm64
            cmake_extra_args: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - label: macOS (Intel)
            os: macOS
            runner: macos-13
            archive_suffix: macos-x86_64
            cmake_extra_args: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
          - label: Windows (x64)
            os: Windows
            runner: windows-latest
            archive_suffix: windows-x64
            cmake_extra_args: ""
    env:
      BUILD_TYPE: Release
      VERSION: ${{ github.ref_name }}
      PACKAGE_NAME: megatoy-${{ github.ref_name }}-${{ matrix.archive_suffix }}
      CMAKE_EXTRA_ARGS: ${{ matrix.cmake_extra_args }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libgtk-3-dev \
            xorg-dev

      - name: Configure CMake (Linux/macOS)
        if: matrix.os != 'Windows'
        shell: bash
        run: cmake -S . -B build-release -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_EXTRA_ARGS

      - name: Configure CMake (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: cmake -S . -B build-release -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE -G "Visual Studio 17 2022" -A x64 $env:CMAKE_EXTRA_ARGS

      - name: Build (Linux/macOS)
        if: matrix.os != 'Windows'
        shell: bash
        run: cmake --build build-release --config $BUILD_TYPE --parallel

      - name: Build (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: cmake --build build-release --config $env:BUILD_TYPE --parallel

      - name: Package Linux artifact
        if: matrix.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/$PACKAGE_NAME
          cp build-release/megatoy dist/$PACKAGE_NAME/
          cd dist
          zip -r $PACKAGE_NAME.zip $PACKAGE_NAME

      - name: Package macOS artifact
        if: matrix.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          APP_PATH="build-release/megatoy.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "App bundle not found at $APP_PATH" >&2
            exit 1
          fi
          mkdir -p dist
          ditto -c -k --keepParent "$APP_PATH" "dist/$PACKAGE_NAME.zip"

      - name: Package Windows artifact
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $appPath = Join-Path 'build-release' 'Release\megatoy.exe'
          if (-Not (Test-Path $appPath)) {
            $appPath = Join-Path 'build-release' 'megatoy.exe'
          }
          if (-Not (Test-Path $appPath)) {
            throw "Could not locate built megatoy executable"
          }
          New-Item -ItemType Directory -Path 'dist' -Force | Out-Null
          $staging = Join-Path 'dist' $env:PACKAGE_NAME
          New-Item -ItemType Directory -Path $staging -Force | Out-Null
          Copy-Item $appPath (Join-Path $staging 'megatoy.exe')
          Push-Location 'dist'
          if (Test-Path ($env:PACKAGE_NAME + '.zip')) { Remove-Item ($env:PACKAGE_NAME + '.zip') }
          Compress-Archive -Path $env:PACKAGE_NAME -DestinationPath ($env:PACKAGE_NAME + '.zip')
          Pop-Location

      - name: Upload release asset (Linux/macOS)
        if: matrix.os != 'Windows'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "$GITHUB_REF_NAME" "dist/$PACKAGE_NAME.zip" --clobber

      - name: Upload release asset (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload $env:GITHUB_REF_NAME "dist/$env:PACKAGE_NAME.zip" --clobber
